rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- YARDIMCI FONKSİYONLAR ---
    function isAuthenticated() { return request.auth != null; }
    function isOwner(userId) { return request.auth.uid == userId; }
    function incByOne(oldVal, newVal) {
      return ((oldVal is int || oldVal is float) && newVal == oldVal + 1) ||
             (!(oldVal is int) && !(oldVal is float) && newVal == 1);
    }
    function myLastActiveField() { return request.auth.uid + '_lastActive'; }

    function getUser(uid) {
      return exists(/databases/$(database)/documents/users/$(uid)) ?
             get(/databases/$(database)/documents/users/$(uid)).data :
             null;
    }

    function userRole(uid) {
      let userData = getUser(uid);
      return (userData != null && userData.role != null) ? userData.role : 'user';
    }

    function isBanned(uid) {
      let userData = getUser(uid);
      return userData != null && userData.status == 'banned';
    }

    function isAdmin(uid) { return userRole(uid) == 'admin'; }
    function isModerator(uid) { return userRole(uid) == 'moderator'; }
    function isPrivileged(uid) { return isAdmin(uid) || isModerator(uid); }

    function canBan(targetUid) {
      return (
        isAdmin(request.auth.uid) ||
        (isModerator(request.auth.uid) && !isAdmin(targetUid) && !isModerator(targetUid))
      );
    }

    function isValidDisplayName(name) {
      return name is string && name.size() >= 3 && name.size() <= 29 && name.matches('^[A-Za-z0-9_]{3,29}$');
    }
    function isReservedName(n) {
      return n in ['admin','root','support','moderator','mod','system','null','undefined','owner','staff','team','vocachat','voca','api'];
    }
    function ownsReservedUsername(uname) {
      return exists(/databases/$(database)/documents/usernames/$(uname)) &&
             get(/databases/$(database)/documents/usernames/$(uname)).data.uid == request.auth.uid;
    }

    // Elmas artışı: sadece ileri yönde, pozitif ve mantıklı bir üst limit içinde.
    // (Offline birikim flush senaryosu için tek seferde max +50000)
    function isValidDiamondIncrement() {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(['diamonds']) &&
             request.resource.data.diamonds is int &&
             (
               (
                 // Alan daha önce yoksa veya null ise ilk set 0 ya da pozitif olabilir (ör: migrate)
                 !(resource.data.diamonds is int) && request.resource.data.diamonds >= 0 && request.resource.data.diamonds <= 50000
               ) || (
                 resource.data.diamonds is int &&
                 request.resource.data.diamonds >= resource.data.diamonds &&
                 (request.resource.data.diamonds - resource.data.diamonds) <= 50000
               )
             );
    }

    function callerNotBanned() { return !isBanned(request.auth.uid); }

    function isValidSupportCreate(data) {
      return data.userId == request.auth.uid &&
             data.subject is string && data.subject.size() > 2 && data.subject.size() <= 120 &&
             data.message is string && data.message.size() >= 10 && data.message.size() <= 5000 &&
             data.status == 'open';
    }

    function isBlocked(byUid, targetUid) { return exists(/databases/$(database)/documents/users/$(byUid)/blockedUsers/$(targetUid)); }

    // --- KOLEKSİYON KURALLARI ---

    match /usernames/{uname} {
      allow create: if isAuthenticated() && !isReservedName(uname) &&
        request.resource.data.keys().hasOnly(['uid','createdAt']) &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.createdAt == request.time;
      allow read: if false;
      allow update, delete: if false;
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId) &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.email == request.auth.token.email &&
        request.resource.data.role == 'user' &&
        request.resource.data.status == 'active' &&
        request.resource.data.isPremium == false;

      allow update: if
        (
          // Profil alanları + username_lowercase birlikte güncellenebilir
          isOwner(userId) && callerNotBanned() &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly([
            'displayName', 'username_lowercase', 'avatarUrl', 'birthDate', 'nativeLanguage', 'learningLanguage', 'learningLanguageLevel', 'lastActivityDate', 'profileCompleted','streak', 'highestStreak', 'totalRoomTime'
          ]) &&
          (
            // username_lowercase değişiyorsa geçerli ve rezerve edilmiş olmalı
            (
              request.resource.data.username_lowercase is string &&
              request.resource.data.username_lowercase.matches('^[a-z0-9_]{3,29}$') &&
              !isReservedName(request.resource.data.username_lowercase) &&
              ownsReservedUsername(request.resource.data.username_lowercase)
            ) || (
              // username_lowercase alanı bu güncellemede yoksa veya değişmiyorsa, diğer profil alanlarına izin ver
              !(request.resource.data.diff(resource.data).changedKeys().hasOnly(['username_lowercase'])) &&
              !(request.resource.data.diff(resource.data).changedKeys().hasAny(['username_lowercase']))
            )
          )
        ) || (
          // FCM token listesi (sadece liste merge/update). Ayrı tutuldu ki diğer alanlarla aynı anda yazılamasın.
          isOwner(userId) && callerNotBanned() &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['fcmTokens']) &&
          request.resource.data.fcmTokens is list &&
          request.resource.data.fcmTokens.size() <= 30
        ) || (
          // Elmas artışı
          isOwner(userId) && callerNotBanned() && isValidDiamondIncrement()
        ) || (
          // Email doğrulaması
          isOwner(userId) && callerNotBanned() &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['emailVerified']) &&
          resource.data.emailVerified == false &&
          request.resource.data.emailVerified == true &&
          request.auth.token.email_verified == true
        ) || (
          // Ban
          isAuthenticated() && canBan(userId) &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','bannedReason','bannedDetails','bannedAt','bannedBy']) &&
          request.resource.data.status == 'banned'
        ) || (
          // Unban
          isAuthenticated() && isPrivileged(request.auth.uid) &&
          resource.data.status == 'banned' && request.resource.data.status == 'active' &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','bannedReason','bannedDetails','bannedAt','bannedBy','unbannedAt','unbannedBy'])
        ) || (
          // Seviye güncelleme (A1..C2)
          isOwner(userId) && callerNotBanned() &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['level']) &&
          request.resource.data.level in ['A1','A2','B1','B2','C1','C2']
        );

      allow delete: if false;

      match /blockedUsers/{targetId} {
        allow read: if isAuthenticated() && (isOwner(userId) || request.auth.uid == targetId);
        allow create: if isAuthenticated() && isOwner(userId) &&
          request.resource.data.keys().hasOnly(['blockedAt','targetUserId']) &&
          request.resource.data.targetUserId == targetId;
        allow update: if isAuthenticated() && isOwner(userId) &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['blockedAt']);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
    }

    match /reports/{reportId} {
      allow create: if isAuthenticated() && callerNotBanned() && isOwner(request.resource.data.reporterId) &&
        request.resource.data.keys().hasOnly(['reporterId','reportedUserId','reason','details','reportedContent','reportedContentId','reportedContentType','reportedContentParentId','timestamp','status','serverAuth']) &&
        request.resource.data.serverAuth == true &&
        request.resource.data.status == 'pending' &&
        request.resource.data.reason is string && request.resource.data.reason.size() > 2 && request.resource.data.reason.size() <= 120 &&
        (request.resource.data.details == null || (request.resource.data.details is string && request.resource.data.details.size() <= 2000));
      allow read: if isAuthenticated() && isPrivileged(request.auth.uid);
      allow update: if isAuthenticated() && isPrivileged(request.auth.uid) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','reviewedAt','reviewedBy']) &&
        request.resource.data.status in ['pending','reviewed','dismissed'];
      allow delete: if false;
    }

    match /support/{ticketId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isPrivileged(request.auth.uid));
      allow create: if isAuthenticated() && callerNotBanned() &&
        (getUser(request.auth.uid) != null && getUser(request.auth.uid).isPremium == true) &&
        isValidSupportCreate(request.resource.data) &&
        request.resource.data.keys().hasOnly(['userId','subject','message','status','createdAt','updatedAt','attachments','platform','email','displayName','serverAuth']) &&
        request.resource.data.serverAuth == true &&
        request.resource.data.createdAt is timestamp && request.resource.data.createdAt <= request.time &&
        request.resource.data.updatedAt is timestamp && request.resource.data.updatedAt <= request.time &&
        (request.resource.data.attachments is list);
      allow update: if isAuthenticated() && isPrivileged(request.auth.uid) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','updatedAt','updatedBy','adminResponse','assignedTo']) &&
        request.resource.data.status in ['open','in_progress','resolved','closed'];
      allow delete: if false;

      match /messages/{messageId} {
        allow read: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/support/$(ticketId)).data.userId) || isPrivileged(request.auth.uid));
        allow create: if isAuthenticated() && callerNotBanned() && ((
          isOwner(get(/databases/$(database)/documents/support/$(ticketId)).data.userId) &&
          request.resource.data.senderId == request.auth.uid &&
          request.resource.data.senderRole == 'user'
        ) || (
          isPrivileged(request.auth.uid) &&
          request.resource.data.senderId == request.auth.uid &&
          request.resource.data.senderRole == 'admin'
        )) &&
        request.resource.data.keys().hasOnly(['senderId','senderRole','message','timestamp','attachments']) &&
        request.resource.data.message is string && request.resource.data.message.size() > 0 && request.resource.data.message.size() <= 5000 &&
        (request.resource.data.attachments == null || (request.resource.data.attachments is list));
        allow update, delete: if false;
      }
    }
  }
}
